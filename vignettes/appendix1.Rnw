%\VignetteEngine{knitr::knitr}
%\VignetteDepends{ggplot2}
%\VignetteDepends{xtable}
%\VignetteIndexEntry{Using the betararef package}
\documentclass{article}
\usepackage{scrtime}
\usepackage{color}
\title{Appendices}
\usepackage[english]{babel}  %% texi2dvi ~ bug
% \usepackage{natbib} %% incompatible with biblatex
\usepackage[
backend=biber,
authordate
]{biblatex-chicago}
\addbibresource{appendix1.bib}
\author{Ben Bolker, Adrian Stier, Craig Osenberg}
\date{\today @ \thistime}
%\bibliographystyle{chicago}
\begin{document}
%\maketitle
\newcommand{\code}[1]{{\tt #1}}
\newcommand{\fixme}[1]{{\color{red} \textbf{#1}}}
\newcommand{\bmb}[1]{{\color{blue} \emph{#1}}}

<<knitopts,echo=FALSE>>=
library("knitr")
opts_chunk$set(fig.width=6,fig.height=6,
               out.width="\\textwidth",fig.align="center",
               tidy.source=FALSE,warning=FALSE,echo=FALSE,error=FALSE,
               ## fig.path="figures/appendix_S1_",
               fig.pos="hbp")
@ 

<<pkgs,message=FALSE,warning=FALSE,echo=FALSE>>=
## get packages
library(ggplot2)
library(scales)    ## for 'scientific'
library(grid)      ## for unit() - squashed panels
library(gridExtra) ## grid.arrange()
library(reshape2)  ## melt()
library(plyr)      ## rename()
@ 

<<ggtheme,echo=FALSE>>=
## play with ggplot theme
theme_set(theme_bw())
theme_update(axis.text.x=element_text(colour="black",size=12),
          axis.text.y=element_text(colour="black",,size=12),
          axis.ticks=element_line(colour="black"),
          panel.grid.minor = element_blank(),
          panel.grid.major = element_blank(),
          panel.background=element_rect(fill="white",colour="white"),
          panel.margin=unit(0,"lines"))
## general-purpose setup for multi-faceted beta sim results
gstuff <- list(geom_point(),
               geom_line(aes(group=interaction(spcurve,st))),
               scale_shape_discrete(name="rank-abund param"),
               scale_x_log10(labels=trans_format('log10', math_format())),
               scale_colour_brewer(name="# patches",palette="Dark2"))
## switch to using both colour and shape for rank-abundance parameter
gstuff2 <- list(geom_line(),
                geom_point(fill="white"),
                scale_shape_manual(name="rank-abundance parameter",
                                   values=21:25),
                scale_x_log10(labels=trans_format('log10', math_format()),
                              limits=c(10,2e4),
                              breaks=c(10^(1:4))),
                scale_colour_brewer(name="rank-abundance parameter",
                                    palette="Dark2")
                )
gstuff3 <- list(geom_point(),
               geom_line(aes(group=st)),
               scale_x_log10(labels=trans_format('log10', math_format())),
               scale_colour_brewer(name="# patches",palette="Dark2"))
zmargin <- theme(panel.margin=unit(0,"lines"))
@ 

%% uncomment for Ecosphere appendix:
\renewcommand\thefigure{S\arabic{figure}}
\renewcommand{\thesection}{Appendix S\arabic{section}}
\makeatletter
\@addtoreset{figure}{section}
\makeatother
\setcounter{section}{0}
\setcounter{page}{1}
\setcounter{figure}{0}

\section{Code/introduction}

All the code that we use in the paper, and in the appendix, is available
as an R package.  It can be installed via
<<install_pkg,eval=FALSE,echo=TRUE>>=
library(ghit)
install_github("betararef",username="bbolker")
@
You will need to install the \code{ghit} package from any
standard CRAN repository first (if you have
the \code{devtools} package installed, you
can use that instead). Since the package contains only
R code (no compiled C/C++/FORTRAN code), you should \emph{not}
need to have other development tools installed.

To begin using the package you need to load it
(it needs to be installed only once per R installation,
but loaded every time you start a new R session):

<<load_pkg,echo=TRUE>>=
library(betararef)
@

\clearpage

\section{Community simulator}

The simulation first simulates a set of `endemic' species
in a specified number of patches, then mixes some proportion
of each species randomly across all patches according to
specified rules.  The parameters of the simulation are as follows:

\begin{description}
  \item[n.abund]{number of abundance categories (e.g. 2=\{common, rare\};
      3=\{common, intermediate, rare\})}
  \item[p.abund]{proportional change between abundance categories 
      (rank-abundance curve is geometric: overall frequencies of abundance categories are proportional to $\{1, \phi, \phi^2, \ldots\}$)}
  \item[spcat]{number of species per site per abundance category (i.e. the total number of (endemic) species per site is \code{spcat*n.abund}, and the complete size of the species pool is \code{spcat*n.abund*n.site}): may be $<1$, but the total number of species per abundance category (\code{spcat*n.site}) must be an integer}
  \item[n.site]{number of sites}
  \item[n.indiv.site]{number of individuals per site}
  \item[p.mix]{vector of mixing probabilities for each abundance category: 0=no mixing, 1=complete mixing, e.g. when \code{n.abund=2}, \{0,1\} means that common species are completely mixed and rare species are completely endemic}
  \item[rand]{``none'': \emph{expected} number of individuals per site/species is reported; ``multinomial'': number of individuals per site is held constant, proportions chosen randomly; ``poisson'': number of individuals per site/species is Poisson distributed}
\end{description}
     
In general the simulator returns a site $\times$ species matrix, which we can
postprocess with the tools from \code{vegan} to compute beta diversities.

Here are some typical examples.   If we use all of the default
values for \code{betasim}, we get 3 sites (rows) with a total of
30 species: 5 abundance classes $\times$ 2 species per site $\times$ 3 sites.
By default there is no mixing among sites (100\% beta diversity), so looking
at the default plot (rows=sites, columns=species) we see that each site has blocks of 2 species from each abundance class (grayscale indicates prevalence)
(Figure~\ref{fig:beta_ex1}).
(The default for \code{betasim} (but not for \code{simComm})
is to introduce no randomness at all, simply returning a matrix with the
\emph{expected} number of individuals of each species at each site.)

<<beta_ex1,fig.width=12,out.width="1.2\\textwidth",fig.cap="Species matrix for default \\code{betasim} settings: 3 sites, 10 species per site (5 abundance classes/2 spp per abundance class), no mixing.">>=
library(betararef)
set.seed(101)
b0 <- betasim()
plot(b0)
@

If we allow 100\% mixing, then all species are present at all sites in
the same numbers (Figure~\ref{fig:mixplot}).
We can also allow partial mixing (Figure~\ref{fig:partmix})
and Poisson variation in the output (Figure~\ref{fig:poissmix}).

<<mixplot,fig.width=12,out.width="1.2\\textwidth",fig.cap="Species matrix for \\code{betasim()} with default parameters (3 sites/5 abundance classes/2 spp per AC) but 100\\% mixing.">>=
plot(betasim(p.mix=1))
@

<<partmix,fig.width=12,out.width="1.2\\textwidth",fig.cap="Species matrix for \\code{betasim()} with default parameters (3 sites/5 abundance classes/2 spp per AC) and 50\\% mixing for all abundance classes.">>=
plot(betasim(p.mix=0.5))
@

<<poissmix,fig.width=12,out.width="1.2\\textwidth",fig.cap="Species matrix for \\code{betasim()} with default parameters (3 sites/5 abundance classes/2 spp per AC) with 50\\% mixing for all abundance classes and incorporating Poisson variation in the output.">>=
plot(betasim(p.mix=0.5,rand="poisson"))
@

We can change the number sites or the number of abundance classes: by default, the \code{spcat} (number of species per site per abundance category) will be adapted to try to make the total number of species come out correctly (i.e. \code{spcat} will be set to \code{totsp/(n.site*n.abund)}: Figure~\ref{fig:diffsites}).  If \code{totsp} is not an even multiple of \code{n.site*n.abund}, the results may be slightly unpredictable \ldots
<<diffsites,fig.width=12,out.width="1.2\\textwidth",fig.cap="Species matrix for \\code{betasim()} with 5 sites, 3 abundance classes, 2 spp per AC, 25\\% mixing for all abundance classes, and Poisson variation.">>=
plot(betasim(n.site=5,n.abund=3,p.mix=0.25,rand="poisson"))
@

\code{calcbeta} calculates distances from the centroid (by default,
using a Jaccard index on presence-absence data: Figure~\ref{fig:centrdisthist}).
<<centrdisthist,cache=TRUE,fig.cap="Histogram of \\code{calcbeta} output for 10000 simulated communities (median Jaccard distance to centroid).">>=
d1 <- replicate(1000,median(calcbeta(betasim(rand="poiss",p.mix=0.25))))
par(las=1,bty="l")
hist(d1,col="gray",main="",xlab="median Jaccard distance from centroid",
     freq=FALSE)
@

\code{simComm} simulates multiple communities (with  possibly different
characteristics) at the same time (Figure~\ref{fig:simcomm}).
<<simcomm,fig.width=16,fig.cap="Output of \\code{simComm}: two communities simualted simultaneously, with 30 species at each site and mixing proportions of 0.2 and 0.7 respectively.">>=
plot(simComm(totsp=c(30,30),p.mix=c(0.2,0.7)))
@

%% uncomment for Ecosphere appendix:
%% \pagebreak

%% \renewcommand\thefigure{S\arabic{figure}}
%% \renewcommand{\thesection}{Appendix S\arabic{section}}
%% \setcounter{section}{0}
%% \setcounter{page}{1}
%% \setcounter{figure}{0}

\clearpage

\section{Alternative diversity indices}
\begin{refsection}

In the main text we focus on the Jaccard index based on binary
(presence-absence) data. The literature is full of alternative
diversity measures; while our analysis focuses on the effect
of sampling rather and hopes to be generally applicable across
different indices, we should at least consider what would happen
if we were to use an index based on continuous (count) data instead.
Figure~\ref{fig:manhattanpairwise} shows results for the Manhattan index 
(we use either Hellinger or square root transformations as recommended by 
\textcite{legendre_2013}; however, \cite{legendre_2013} have also criticized the Manhattan index,
saying that in particular it does not properly handle situations where multiple
sites are missing the same pairs of species).

<<load_batch6,echo=FALSE,eval=FALSE,results="hide">>=
L <- load("batchfiles/betasim_batch8.RData")
save("d2",file="betasim_batch8_sum.RData")
@

<<manhattanpairwise,out.width="1.1\\textwidth",fig.width=8,echo=FALSE,results="hide",fig.cap="Diversity results for Manhattan index">>=
load("batchfiles/betasim_batch8_sum.RData")
g4 <- ggplot(d2,
             aes(x=abund,y=value/abund,
                 colour=factor(st),shape=factor(spcurve)))+
    gstuff+
    labs(x="local population size",y="beta (mean Manhattan dist)")
(g4f <- g4 + facet_grid(pmixcommon~pmixrare,label=label_both))
@ 

This analysis extends the general principle that 
we can understand the effects
of sampling on beta diversity by considering 
the expected effect of sampling intensity on variance.  In this case, the
responses are counts rather than binomial (binary) responses, so
the expected variance of the response, and thus the estimated
beta diversity, is proportional to $1/\sqrt{N}$.
In contrast to the binary Jaccard results,
there is no hint of non-monotonicity on the beta diversity curves.  The number
of sites has negligible effects on the computed beta diversity: the
rank-abundance curve has moderate effects, although they disappear in
extreme (low- or high-mixing) cases.

<<rcpairwise,out.width="1.1\\textwidth",fig.width=8,echo=FALSE,fig.cap="Diversity results for Raup-Crick index">>=
## load("batchfiles/betasim_batch10.RData")
## aa <- drop(apply(beta_mix_tab,1:7,mean))
## mm <- melt(aa)
## names(mm) <- c("abund","st","pmixcommon","pmixrare","rankabund","value")
load("batchfiles/betasim_batch10_sum.RData")
(g5 <- ggplot(mm,
             aes(x=abund,y=value/abund,colour=factor(st)))+
             gstuff3+
    facet_grid(pmixcommon~pmixrare,label=label_both)+
    labs(x="local population size",y="Raup-Crick"))
@

\cite{chase_2011} have recommended the Raup-Crick dissimilarity index,
which characterizes diversity as the probability 
(based on permutation tests) that two communities
have the same species composition.
Raup-Crick indices are robust to many different
aspects of community structure, and indeed 
when we run the same set of analyses as Figure~3 in the main text,
we see that this index is robust to 
variation in all axes of ecological variation
(number of sites, rank-abundance curve, mixing probabilities)
\emph{except} for sampling intensity/local population size
(Figure~\ref{fig:rcpairwise}).
In other words, the figure shows the same general decrease in beta diversity with
increasing sample size as other density-based metrics such
as the Manhattan index, but the curves are identical across all other
axes of variation.

<<alldists,fig.cap="Beta diversity curves (scaled 0-1 for each diversity metric) as a function of sample size for a range of distribution for pmixrare=pmixcommon=0.5.",fig.scap="Beta diversity curves",fig.width=7,fig.height=7,out.width="\\textwidth">>=
## L <- load("batchfiles/betasim_batch11_allvals.RData")
## as <- subset(allvals,pmixcommon == 0.5 & pmixrare == 0.5)
## library("plyr") ## for ddply
## as.scaled <- ddply(as,
##                    c("dist1","dist2"),
##                    transform,
##                    value=(value-min(value))/(max(value)-min(value)))
## ## OR: value=scale(value,center=min(value),scale=diff(range(value)))
## as2 <- subset(as.scaled,dist2=="pairwise")
## save("as2",file="betasim_batch11_sum.RData")
load("batchfiles/betasim_batch11_sum.RData")
ggplot(as2,aes(x=abund,y=value))+
       geom_point(aes(colour=factor(st),shape=factor(spcurve)))+
       geom_line(aes(colour=factor(st),shape=factor(spcurve)))+
       scale_shape_discrete(name="rank-abund param")+
       scale_x_log10(labels=trans_format('log10', math_format()))+
       scale_colour_brewer(name="# patches",palette="Dark2")+
       facet_wrap(~dist1)
## gfun <- function(dist1v="manhattan",dist2v="pairwise") {
##     d2 <- subset(allvals,dist1==dist1v & dist2==dist2v)
##     g4 <- ggplot(d2,
##                  aes(x=abund,y=value/abund,
##                      colour=factor(st),shape=factor(spcurve)))+
##     gstuff+
##         labs(x="local population size",
##              y=sprintf("beta (mean %s %s)",dist1v,dist2v))
##     g4 + facet_grid(pmixcommon~pmixrare,label=label_both)
## }
## levels(allvals$dist1)
## gfun("manhattan","centroid")
## ## why don't these look like we'd expect from old Jaccard?
## gfun("jaccard","centroid")
## gfun("jaccard","pairwise")
## gfun("canberra","centroid")
## gfun("gower","centroid")

@

\printbibliography
\end{refsection}

\section{Power analyses}
%% uncomment for Ecosphere
%% \setcounter{figure}{0}

We ran power analyses of hierarchical rarefaction analysis, varying the true difference in beta diversity, the average population/sample size per patch, the difference in population/sample size per patch, and the difference in the number of patches. We kept the average number of patches equal to 20, and the number of species per community equal to 20.

<<powanal,echo=FALSE,fig.keep="none",fig.width=10>>=
##
## figure moved to main text -- still generate it, but don't put it in the
##   document
##
## fig.cap="Power analysis results for varying number of patches in each of two communities (colors); average per-patch population size (rows); proportional difference in per-patch population size between communities (columns). Horizontal dashed lines show power=.05 (nominal $\\alpha$ level) and power=0.8 (a standard cut-off for ``adequate'' power).",fig.scap="Power analysis results"
L1 <- load("batchfiles/rareftest-batch13.RData")
L2 <- load("batchfiles/rareftest-batch15.RData")
L3 <- load("batchfiles/rareftest-batch16.RData")
L4 <- load("batchfiles/rareftest-batch17.RData")
## calc. power
pow1 <- apply(power2arr,2:length(dim(power2arr)),
            function(x) mean(na.omit(x)<0.05))
pow1.n <- apply(power2arr,2:length(dim(power2arr)),
            function(x) length(na.omit(x)))

pow2 <- subset(melt(pow1),popsize<50)
pow2.n <- rename(melt(pow1.n),c(value="n"))
pow2 <- merge(pow2,pow2.n)
pow2 <- mutate(pow2,
               se=sqrt(value*(1-value)/n),
               lwr=value-1.96*se,
               upr=value+1.96*se)
label_custom <- function (labels) {
    variable <- names(labels)
    value <- unlist(labels)
    ret <- llply(as.character(value),
          function(x) {
              if (variable=="popsizediff") {
                  xpct <- as.character(100*as.numeric(x))  ## hack
                  bquote(Delta*N==.(xpct)*"%")
              } else if (variable=="popsize") {
                  bquote("mean "*N==.(x))
              } else if (variable=="sizediff") {
                  paste0("# patches=",
                         switch(as.character(x),"0"="{20,20}",
                                "20"="{10,30}",
                                "30"="{5,35}"))
              }
          })
    return(list(ret))
}
ggplot(pow2,aes(x=pmixdiff,y=value,colour=factor(sizediff),
                fill=factor(sizediff)))+
    geom_line()+
    geom_ribbon(aes(ymin=lwr,ymax=upr),colour=NA,alpha=0.2,show.legend=FALSE)+
    scale_x_continuous(breaks=(0:5)/10,
                       labels=c(0,(1:5)/10))+
    scale_colour_brewer(palette="Set2",breaks=c(0,20,30),
                        name="# patches",
                        labels=c("(20,20)","(10,30)","(5,35)"))+
    scale_fill_brewer(palette="Set2")+
    ## geom_line(aes(alpha=n))+
    facet_grid(popsize~popsizediff,labeller=label_custom)+
    geom_hline(yintercept=c(0.05,0.8),lty=2)+
    labs(x=expression("Between-community difference in beta diversity "*(italic(p)["mix"])),
         y="Power")+
    ## scale_alpha(range=c(0.5,1))+
    zmargin
@

The results show that for a per-patch population size of 20, the test is actually slightly conservative (i.e., the probability of rejecting the null hypothesis with $\alpha=0.05$ when it is true (pmixdiff=0) is actually slightly less than $0.05$; for a per-patch population size of 10, the results are slightly anticonservative.  The power curves (i.e., power to detect a specified level of difference in beta diversity) changes little as a function of per-patch population size or population size difference, and declines slightly with increasing asymmetry in the number of patches per site, probably driven by low power in the community with the small number of patches.

<<powspec,echo=FALSE,fig.scap="Type I error rates",fig.cap="Type I error rates (rejection rates when \\code{pmixdiff}=0).",fig.width=10>>=
ss0 <- subset(pow2,pmixdiff==0)
ss <- subset(ss0,!(popsize==20 & sizediff==30))
ggplot(ss0,aes(factor(100*popsizediff),value,colour=factor(sizediff),
               shape=factor(popsize)))+
    geom_pointrange(aes(ymin=value-2*se,ymax=value+2*se),
                    position=position_dodge(width=0.25))+
    facet_grid(.~sizediff,labeller=label_custom)+
    geom_hline(yintercept=c(0.05),lty=2)+
    scale_colour_brewer(palette="Set2",breaks=c(0,20,30),
                        name="# patches",
                        labels=c("(20,20)","(10,30)","(5,35)"))+
    scale_shape(name="Average\npatch size")+
    labs(x="Percentage difference in patch size",y="Type I error rate")
@

Mean and standard error of type~I error rate (true difference
in asymptotic beta diversity/mixing parameter=0), by differences
in numbers of sites, \emph{not} including patch size=20 case
for 30-site \{5,35\} case:

<<meana1,echo=FALSE,results="asis">>=
library("xtable")
meanalpha1 <- ddply(ss,"sizediff",summarise,
                    a.mean=mean(value),
                    a.se=sd(value)/sqrt(length(value)))
print(xtable(meanalpha1,digits=3),floating=FALSE,include.rownames=FALSE)
@

\vskip10pt
For patch size=20, number of sites=\{5,35\}:

<<meana2,echo=FALSE,results="asis">>=
meanalpha2 <- summarise(subset(ss0,sizediff==30 & popsize==20),
                    a.mean=mean(value),
                    a.se=sd(value)/sqrt(length(value)))
print(xtable(meanalpha2,digits=3),floating=FALSE,include.rownames=FALSE)
@

%% uncomment for Ecosphere:
%% \bibliography{appendix1}
%% \pagebreak

\section{Sample-based rarefaction}

As we mention in the paper, our approach to multi-level rarefaction is based
on individual-level rarefaction, in part because of the commonness of
community data with only a single sample per patch (in which case sample-based
rarefaction is useless) and in part because of the complexity of bookkeeping
in the multi-sample/sample-based rarefaction case.

If we stop worrying about the constraints of rarefying each patch to
the minimum number of individuals found in any patch, in any treatment
(which is what necessitates the complex matching strategy implemented
in the package), we can come up with a reasonably simple strategy for
rarefaction.

\begin{itemize}
\item pick the per-patch size $N$ to rarefy to
\item for each patch in each community,
  \begin{itemize}
    \item while the accumulated patch size is $<N$,
      pick a sample from that patch without replacement
    \item if the next-chosen patch makes the patch size $>N$,
      either
      \begin{itemize}
        \item take only the number of individuals from the sample that
          brings the patch up to the target, \emph{or}
        \item add the sample to the patch community,  then remove 
          enough individuals from the community at random to bring
          it back down to the target size
      \end{itemize}
  \end{itemize}
\end{itemize}
      
We have not implemented this functionality yet.

\end{document}
